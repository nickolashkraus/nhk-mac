#!/usr/bin/env bash
#
# DESCRIPTION
#   Defines functions for nhk-mac.
#
#   Each function handles a specific task for setting up a new macOS
#   workstation.
#
# USAGE
#
#   source src/func
#   welcome

###############################################################################
# Write a string to standard output with color. If a color ($2) is not
# provided, this function operates like a standard call to `echo`.
#
# Globals:
#   None
# Arguments:
#   $1: string
#   $2: color (see `src/color`). If not provided, string is output without
#   color
# Outputs:
#   String to standard output with color
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function echo_c() {
  echo -en "${2:-}"
  echo "${1:-}"
  echo -en "${RESET}"
}

###############################################################################
# Print usage.
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Usage to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function usage() {
  echo_c
  echo_c "Usage: nhk-mac [OPTIONS]" "${WHITE}"
  echo_c
  echo_c "Options:" "${WHITE}"
  echo_c "  -h, --help                     Show this help message" "${WHITE}"
  echo_c "  --hostname HOSTNAME            Set system hostname" "${WHITE}"
  echo_c "  --python-version VERSION       Set Python version to install" "${WHITE}"
  echo_c "  --github-access-token TOKEN    Set GitHub access token" "${WHITE}"
  echo_c
  echo_c "If a hostname, Python version, or GitHub access token are not" "${WHITE}"
  echo_c "provided via the command line, you will be prompted to enter them" "${WHITE}"
  echo_c "interactively." "${WHITE}"
  echo_c
}

###############################################################################
# Print welcome prompt.
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Welcome prompt to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function welcome() {
  echo_c
  echo_c "                      _     _                                           " "${RED}"
  echo_c "                _ __ | |__ | | __     _ __ ___   __ _  ___              " "${YELLOW}"
  echo_c "               | '_ \| '_ \| |/ /____| '_ \` _ \ / _\` |/ __|           " "${GREEN}"
  echo_c "               | | | | | | |   <_____| | | | | | (_| | (__              " "${CYAN}"
  echo_c "               |_| |_|_| |_|_|\_\    |_| |_| |_|\__,_|\___|             " "${BLUE}"
  echo_c "                                                                        " "${WHITE}"
  echo_c "                           Welcome to nhk-mac.                          " "${WHITE}"
  echo_c "                                                                        " "${WHITE}"
  echo_c "    nhk-mac is a CLI for quickly setting up a new macOS workstation.    " "${WHITE}"
  echo_c
}

###############################################################################
# Check System Integrity Protection status.
#
# From the yabai documentation...
#
#   System Integrity Protection ("rootless") is a security feature of macOS
#   first introduced in 10.13, then further locked down in 10.14.
#
#   System Integrity Protection protects some files and directories from being
#   modified — even from the root user. yabai needs System Integrity Protection
#   to be (partially) disabled so that it can inject a scripting addition into
#   Dock.app, which owns the sole connection to the macOS window server. Many
#   features of yabai require this scripting addition to be running such that
#   yabai can modify windows, spaces and displays in a way that otherwise only
#   Dock.app could.
#
# Source: https://github.com/koekeishiya/yabai/wiki/Disabling-System-Integrity-Protection
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function check_sip() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Checking System Integrity Protection status..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  output=$(csrutil status)
  if [[ "${output}" =~ enabled ]]; then
    echo_c "  • System Integrity Protection is enabled." "${YELLOW}"
    echo_c "  • Run \`csrutil disable\` in macOS Recovery to disable SIP." "${YELLOW}"
    echo_c
    echo_c "  • On Apple silicon, add the -arm64e_preview_abi boot arg to your system:" "${YELLOW}"
    echo_c "      sudo nvram boot-args=-arm64e_preview_abi" "${YELLOW}"
    exit 1
  else
    echo_c "  • System Integrity Protection is disabled" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Set system hostname via `scutil`.
#
# Globals:
#   HOSTNAME (set via command-line or user prompt)
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if HOSTNAME is not set or an error occurs
###############################################################################
function set_hostname() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Setting hostname..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if [ -z "${HOSTNAME}" ]; then
    echo_c "ERROR: HOSTNAME must be set." "${RED}"
    exit 1
  fi
  if [ "$(scutil --get HostName 2>/dev/null)" != "${HOSTNAME}" ]; then
    echo_c "  • Setting hostname to ${HOSTNAME}"
    sudo scutil --set HostName "${HOSTNAME}"
  else
    echo_c "  • Hostname already set" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Set keyboard behavior via `defaults`.
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
#
# The `defaults` command provides access to the Mac OS X user defaults system.
###############################################################################
function configure_keyboard() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Configuring keyboard..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  # The '-g' option specifies the global domain.
  #
  # See the man pages for `defaults` for further details.
  echo_c "  • Disabling 'Press and Hold' for special characters"
  defaults write -g ApplePressAndHoldEnabled -bool false
  echo_c "  • Setting initial key repeat to 13 (195 ms)"
  defaults write -g InitialKeyRepeat -int 13
  echo_c "  • Setting key repeat to 1 (15 ms)"
  defaults write -g KeyRepeat -int 1
  echo_c "  • Rebind Caps Lock to Control:" "${YELLOW}"
  echo_c
  echo_c "    Go to System Settings > Keyboard > Keyboard Shortcuts…. " "${YELLOW}"
  echo_c "    Under Modifier Keys change Caps Lock (⇪) key to ⌃Control" "${YELLOW}"
  echo_c "    Press ENTER to continue" "${YELLOW}"
  read -rn 1
  echo_c
}

###############################################################################
# Set Dock appearance via `defaults`.
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
#
# The `defaults` command provides access to the Mac OS X user defaults system.
###############################################################################
function configure_dock() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Configuring Dock..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  echo_c "  • Setting orientation to right"
  defaults write com.apple.dock 'orientation' -string 'right'
  echo_c "  • Enabling auto hide"
  defaults write com.apple.dock autohide -bool true
  echo_c "  • Setting auto hide opening delay to 0 seconds"
  defaults write com.apple.dock autohide-delay -int 0
  echo_c "  • Setting auto hide opening and closing animation to 0 seconds"
  defaults write com.apple.dock autohide-time-modifier -int 0
  echo_c "  • Removing persistent apps"
  defaults write com.apple.dock persistent-apps -array
  echo_c "  • Removing persistent app stacks"
  defaults write com.apple.dock persistent-others -array
  echo_c "  • Removing recent apps"
  defaults write com.apple.dock recent-apps -array
  echo_c "  • Disabling recent apps"
  defaults write com.apple.dock show-recent -bool false
  echo_c "  • Setting app size to 32"
  defaults write com.apple.dock tilesize -int 32
  killall Dock
  echo_c
}

###############################################################################
# Set system settings via `defaults`.
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
#
# The `defaults` command provides access to the Mac OS X user defaults system.
###############################################################################
function configure_system_settings() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Configuring System Settings..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  echo_c "  • Setting mouse tracking speed to 1"
  defaults write -g com.apple.mouse.scaling 1
  echo_c "  • Setting trackpad tracking speed to 0.875"
  defaults write -g com.apple.trackpad.scaling 0.875
  echo_c "  • Setting Finder to open new windows with ${HOME}"
  defaults write com.apple.finder NewWindowTarget PfHm
  echo_c "  • Setting Finder to use list view"
  defaults write com.apple.Finder FXPreferredViewStyle Nlsv
  echo_c "  • Setting Finder to sort folders before files"
  defaults write com.apple.finder _FXSortFoldersFirst -bool true
  echo_c "  • Setting appearance to Dark"
  defaults write -g AppleInterfaceStyle Dark
  echo_c "  • Setting accent color to Graphite"
  defaults write -g AppleAquaColorVariant -int 6
  echo_c "  • Setting highlight color to #282828"
  defaults write -g AppleHighlightColor -string "0.156863 0.156863 0.156863 Other"
  echo_c
}

###############################################################################
# Install Git (git) (via Xcode Developer Tools) if it is not already installed.
#
# Apple ships a binary package of Git with Xcode:
#   * https://git-scm.com/download/mac
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_xcode() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing Xcode Developer Tools..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if ! xcode-select -p &>/dev/null; then
    xcode-select --install
    echo_c "Press ENTER to continue" "${YELLOW}"
    read -rn 1
    echo_c "  • Xcode Developer Tools installed" "${YELLOW}"
  else
    echo_c "  • Xcode Developer Tools already installed" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Install Homebrew (brew) if it is not already installed.
#
# Homebrew: https://brew.sh
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_homebrew() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing Homebrew..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if [ ! -x "$(command -v /opt/homebrew/bin/brew)" ]; then
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/opt/homebrew/bin/brew shellenv)"
    echo_c "  • Homebrew installed" "${YELLOW}"
  else
    eval "$(/opt/homebrew/bin/brew shellenv)"
    echo_c "  • Homebrew already installed" "${GREEN}"
  fi
  echo_c "  • Updating Homebrew..." "${YELLOW}"
  brew update && brew upgrade
  echo_c
}

###############################################################################
# Install Homebrew packages via Homebrew Bundle.
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_homebrew_packages() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing Homebrew packages..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  curl -fsSL https://raw.githubusercontent.com/nickolashkraus/dotfiles/refs/heads/master/Brewfile \
    -o Brewfile
  brew bundle --file=Brewfile
  rm Brewfile
  echo_c "  • Upgrading Homebrew packages..."
  brew upgrade
  echo_c
}

###############################################################################
# Install Oh My Zsh if it is not already installed.
#
# Oh My Zsh: https://ohmyz.sh
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_oh_my_zsh() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing Oh My Zsh..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if [ ! -d "${HOME}/.oh-my-zsh" ]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    echo_c "  • Oh My Zsh installed" "${YELLOW}"
  else
    echo_c "  • Oh My Zsh already installed" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Install vim-plug if it is not already installed.
#
# vim-plug: https://github.com/junegunn/vim-plug
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_vim_plug() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing vim-plug..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if [ ! -f "${HOME}/.vim/autoload/plug.vim" ]; then
    curl -fLo "${HOME}/.vim/autoload/plug.vim" --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    echo_c "  • vim-plug installed" "${YELLOW}"
  else
    echo_c "  • vim-plug already installed" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Install Powerline fonts if they are not already installed.
#
# Powerline fonts: https://github.com/powerline/fonts
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_powerline_fonts() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing Powerline fonts..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if [ ! -e "${HOME}/Library/Fonts/Meslo LG S Regular for Powerline.ttf" ]; then
    mkdir -p "${HOME}/Library/Fonts"
    fonts_dir="$(mktemp -d)"
    git clone https://github.com/powerline/fonts.git --depth=1 "${fonts_dir}"
    pushd "${fonts_dir}" >/dev/null || exit
    ./install.sh
    popd >/dev/null || exit
    rm -rf "${fonts_dir}"
    echo_c "  • Powerline fonts installed" "${YELLOW}"
  else
    echo_c "  • Powerline fonts already installed" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Generate SSH key pair (id_rsa, id_rsa.pub) if it does not exist.
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs. ssh-keygen exits 1 if the
#   output keyfile already exists
###############################################################################
function generate_ssh_keys() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Generating SSH key pair..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if [ ! -d "${HOME}/.ssh" ]; then
    mkdir -p "${HOME}/.ssh"
  fi
  if [ ! -f "${HOME}/.ssh/id_rsa" ]; then
    curl -fsSL https://raw.githubusercontent.com/nickolashkraus/bash-scripts/master/generate-ssh-keys \
      -o generate-ssh-keys
    chmod +x generate-ssh-keys
    ./generate-ssh-keys -f id_rsa
    rm generate-ssh-keys
    echo_c "  • SSH key pair generated" "${YELLOW}"
    echo_c "  • Public key:" "${YELLOW}"
    cat "${HOME}/.ssh/id_rsa.pub"
    echo_c "  • Add your public key to GitHub, GitLab, etc." "${YELLOW}"
    echo_c "    Press ENTER to continue" "${YELLOW}"
    read -rn 1
  else
    echo_c "  • SSH key pair already exists" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Set up workspace (github.com/nickolashkraus) if it does not exist.
#
# Globals:
#   GITHUB_ACCESS_TOKEN (set via command-line or user prompt)
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function set_up_workspace() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Setting up workspace..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if [ ! -d "${HOME}/nickolashkraus/nhk-mac" ]; then
    mkdir -p "${HOME}/nickolashkraus"
    echo_c "  • Cloning repositories from github.com/nickolashkraus..."
    pushd "${HOME}/nickolashkraus" >/dev/null || exit
    if ! [ -x "$(command -v jq)" ]; then
      brew install jq
    fi
    curl -fsSL https://raw.githubusercontent.com/nickolashkraus/bash-scripts/master/git-clone-gh \
      -o git-clone-gh
    chmod +x git-clone-gh
    ./git-clone-gh --user nickolashkraus --skip-archived "${GITHUB_ACCESS_TOKEN}"
    rm git-clone-gh
    popd >/dev/null || exit
  else
    echo_c "  • Workspace (${HOME}/nickolashkraus) already exists" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Install Java via Homebrew.
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
#
# openjdk is keg-only, which means it is not symlinked to `brew --prefix`
# ($HOMEBREW_PREFIX). This is because macOS provides similar software and
# installing this software in parallel can cause issues.
#
# NOTE: A Homebrew formula that is keg-only is installed only into the Cellar
# and is not symlinked into the default prefix.
#
# https://docs.brew.sh/FAQ#what-does-keg-only-mean
###############################################################################
function install_java() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing Java..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if [ "$(command -v java)" != "$(brew --prefix)/opt/openjdk/bin/java" ]; then
    brew install java
    # For the system Java wrappers to find this JDK, symlink it with:
    sudo ln -sfn "$(brew --prefix)/opt/openjdk/libexec/openjdk.jdk" /Library/Java/JavaVirtualMachines/openjdk.jdk
    export PATH="$(brew --prefix)/opt/openjdk/bin:$PATH"
    # For compilers to find openjdk, CPPFLAGS is set.
    export CPPFLAGS="-I$HOMEBREW_PREFIX/opt/openjdk/include"
    echo_c "  • Java installed" "${YELLOW}"
  else
    echo_c "  • Java already installed" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Install Python via pyenv.
#
# pyenv: https://github.com/pyenv/pyenv
#
# Globals:
#   PYTHON_VERSION (set via command-line or user prompt)
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_python() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing Python..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  if ! pyenv versions | grep -q "${PYTHON_VERSION}"; then
    echo_c "  • Installing Python ${PYTHON_VERSION}..." "${YELLOW}"
    # '--enable-framework' option is required by YouCompleteMe
    export PYTHON_CONFIGURE_OPTS="--enable-framework"
    pyenv install "${PYTHON_VERSION}"
    pyenv global "${PYTHON_VERSION}"
    python -m pip install --upgrade pip >/dev/null 2>&1
    echo_c "  • Python ${PYTHON_VERSION} installed" "${YELLOW}"
  else
    pyenv global "${PYTHON_VERSION}"
    echo_c "  • Python ${PYTHON_VERSION} already installed" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Set up 'default' virtual environment.
#
# Globals:
#   PYTHON_VERSION (set via command-line or user prompt)
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function set_up_virtualenv() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Setting up virtualenv..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
  if [ -z "${PYENV_VERSION:-}" ] || [ "$(pyenv version-name)" != "${PYENV_VERSION}" ]; then
    echo_c "  • Setting up 'default' virtual environment..." "${YELLOW}"
    pyenv virtualenv "${PYTHON_VERSION}" default
    python -m pip install --upgrade pip >/dev/null 2>&1
    echo_c "  • 'default' virtual environment created" "${YELLOW}"
  else
    pyenv activate default >/dev/null 2>&1
    echo_c "  • 'default' virtual environment already exists" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Install Bash scripts.
#
# Bash scripts: https://github.com/nickolashkraus/bash-scripts
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_bash_scripts() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing Bash scripts..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  pushd "${HOME}/nickolashkraus/bash-scripts" >/dev/null || exit
  ./install
  popd >/dev/null || exit
  echo_c "  • Bash scripts installed" "${YELLOW}"
  echo_c
}

###############################################################################
# Install dotfiles.
#
# dotfiles: https://github.com/nickolashkraus/dotfiles
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_dotfiles() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing dotfiles..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  pushd "${HOME}/nickolashkraus/dotfiles" >/dev/null || exit
  ./install
  popd >/dev/null || exit
  echo_c "  • dotfiles installed" "${YELLOW}"
  echo_c
}

###############################################################################
# Install Vim plugins via vim-plug.
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_vim_plugins() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing Vim plugins..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  vim +PlugClean +qall && vim +PlugInstall +qall && vim +PlugUpdate +qall
  echo_c "  • Vim plugins installed" "${YELLOW}"
  echo_c
}

###############################################################################
# Install fzf.
#
# fzf: https://github.com/junegunn/fzf
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_fzf() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing fzf..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if [ ! -f "${HOME}/.fzf.zsh" ]; then
    "$(brew --prefix)/opt/fzf/install"
    echo_c "  • fzf installed" "${YELLOW}"
  else
    echo_c "  • fzf already installed" "${GREEN}"
  fi
  echo_c
}

###############################################################################
# Install yabai.
#
# yabai: https://github.com/koekeishiya/yabai
#
# See the Wiki for more information:
#  * https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_yabai() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing yabai..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  yabai --start-service
  if [ ! -e '/private/etc/sudoers.d/yabai' ]; then
    echo_c "  • To automatically load the scripting addition on startup, add the following sudoers file:" "${YELLOW}"
    echo_c "      sudo visudo -f /private/etc/sudoers.d/yabai" "${YELLOW}"
    echo_c "      $(whoami) ALL=(root) NOPASSWD: $(brew --prefix)/bin/yabai --load-sa" "${YELLOW}"
    echo_c
    echo_c "    Press ENTER to continue" "${YELLOW}"
    read -rn 1
  fi
  echo_c "  • yabai installed" "${YELLOW}"
  echo_c
}

###############################################################################
# Install skhd.
#
# skhd: https://github.com/koekeishiya/skhd
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function install_skhd() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Installing skhd..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  skhd --start-service
  echo_c "  • skhd installed" "${YELLOW}"
  echo_c
}

###############################################################################
# Configure GUI applications.
#
# Alfred: https://www.alfredapp.com
# Firefox: https://www.firefox.com
# iTerm2: https://iterm2.com
#
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Execution logging to standard output
# Returns:
#   Exits 0 on success, and >0 if an error occurs
###############################################################################
function configure_gui_applications() {
  echo_c "####################################################################" "${WHITE}"
  echo_c "Configure GUI applications..." "${WHITE}"
  echo_c "####################################################################" "${WHITE}"
  if [ -d '/Applications/Firefox.app' ]; then
    echo_c "  • Firefox installed" "${YELLOW}"
    echo_c "    To configure Firefox, open the application, then click the user icon to sign in." "${YELLOW}"
    echo_c
    echo_c "    Configure extensions (Dark Reader, Firefox Color, LastPass, Vimium)." "${YELLOW}"
    echo_c
    echo_c "    Press ENTER to continue" "${YELLOW}"
    read -rn 1
  fi
  if [ -d '/Applications/Alfred 5.app' ]; then
    echo_c "  • Alfred 5 installed" "${YELLOW}"
    echo_c "    To configure Alfred 5, open the application, then click Begin Setup…" "${YELLOW}"
    echo_c "    Enter your Alfred 5 Powerpack License." "${YELLOW}"
    echo_c "    Configure macOS permissions." "${YELLOW}"
    echo_c "      - Request Accessibility access" "${YELLOW}"
    echo_c "      - Open macOS Full Disk Access preferences" "${YELLOW}"
    echo_c
    echo_c "    Disable Spotlight search." "${YELLOW}"
    echo_c "    Go to System Settings > Keyboard > Keyboard Shortcuts…. " "${YELLOW}"
    echo_c "    Under Spotlight, uncheck 'Show Spotlight search'." "${YELLOW}"
    echo_c "    Set Alfred Hotkey to Command (⌘) Space." "${YELLOW}"
    echo_c
    echo_c "    Set preferences folder." "${YELLOW}"
    echo_c "    Under Advanced, click 'Set preferences folder…', then add:" "${YELLOW}"
    echo_c "    /Users/$(whoami)/nickolashkraus/dotfiles/Alfred" "${YELLOW}"
    echo_c
    echo_c "    Press ENTER to continue" "${YELLOW}"
    read -rn 1
  fi
  if [ -d '/Applications/iTerm.app' ]; then
    echo_c "  • iTerm2 installed" "${YELLOW}"
    echo_c "    To load settings from a custom folder, open the application, then" "${YELLOW}"
    echo_c "    click Settings… > General > Settings" "${YELLOW}"
    echo_c
    echo_c "    Check 'Load settings from a custom folder or URL', then add:" "${YELLOW}"
    echo_c "    /Users/$(whoami)/nickolashkraus/dotfiles/iTerm2" "${YELLOW}"
    echo_c "    Then set 'Save changes' to 'Automatically'." "${YELLOW}"
    echo_c
    echo_c "    NOTE: You will need to restart iTerm2 for the changes to take effect." "${YELLOW}"
    echo_c
    echo_c "    Press ENTER to continue" "${YELLOW}"
    read -rn 1
  fi
  echo_c
}
